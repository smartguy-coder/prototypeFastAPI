version: '3.8'

services:
  documentation:
    image: squidfunk/mkdocs-material:latest
    container_name: mkdocs
    hostname: mkdocs
    command: serve --dev-addr=0.0.0.0:8010 --watch-theme
    restart: unless-stopped
    ports:
      - "8010:8010"
    volumes:
      - ./documentation:/docs:ro
    stdin_open: true
    tty: true
    networks:
      - main_network

  master-backend-api:
    build:
      dockerfile: Dockerfile
      context: ./master_backend_api
    container_name: master-backend-api
    restart: on-failure
    env_file: .env
    healthcheck:
      test: curl -f http://localhost:10000/docs/ || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./master_backend_api/app:/app
    ports:
      - "10000:10000"
    command: |
      sh -c "
          alembic upgrade head
          uvicorn main:app --port=10000 --host=0.0.0.0 --workers 1 --reload --no-access-log
      "
    # gunicorn -w 4 -b 0.0.0.0:10000 -k uvicorn.workers.UvicornWorker main:app
    networks:
      - main_network
      - postgres_network
      - redis_network
      - rabbitmq_network
    depends_on:
      postgres_database:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      notification_service:
        condition: service_started
      s3:
        condition: service_healthy

  web-jinja:
    build:
      dockerfile: Dockerfile
      context: ./web_jinja
    container_name: web-jinja
    restart: on-failure
    env_file: .env
    healthcheck:
      test: curl -f http://localhost:15000/docs/ || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./web_jinja/app:/app
    ports:
      - "15000:15000"
    command: |
      sh -c "
          uvicorn main:app --port=15000 --host=0.0.0.0 --workers 1 --reload --no-access-log
      "
    # gunicorn -w 4 -b 0.0.0.0:15000 -k uvicorn.workers.UvicornWorker main:app
    networks:
      - main_network
    depends_on:
      master-backend-api:
        condition: service_healthy



  notification_service:
    build:
      dockerfile: Dockerfile
      context: ./notification_service
    container_name: notification_service
    restart: on-failure
    env_file: .env
    volumes:
      - ./notification_service/app:/app
    command: |
      sh -c "
        python /app/main.py
      "
    networks:
      - rabbitmq_network
      - main_network
    depends_on:
      rabbitmq:
        condition: service_healthy

  postgres_database:
    image: postgres:16
    container_name: postgres_database
    restart: always
    env_file: .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db || exit 1" ]  # pg_isready - is a postgres util
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - main_network
      - postgres_network

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:9.0
    env_file: .env
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres_network
    depends_on:
      postgres_database:
        condition: service_healthy

  redis:
    image: redis:7.0.8-alpine
    container_name: redis
    restart: unless-stopped
    env_file: .env
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: [ "redis-server", "--appendonly", "no", "--maxmemory", "10mb", "--maxmemory-policy", "allkeys-lru" ]
    healthcheck:
      test: ['CMD', "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - main_network
      - redis_network

  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redis-insight:/data
    networks:
      - redis_network
    depends_on:
      redis:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: ${RABBITMQ_HOSTNAME}
    container_name: ${RABBITMQ_CONTAINER_NAME}
    restart: always
    env_file:
      - .env
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_UI_PORT}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - rabbitmq_network
      - main_network
    healthcheck:
      test: rabbitmq-diagnostics -q check_running
      interval: 10s
      timeout: 10s
      retries: 5

  s3:
    image: bitnami/minio
    container_name: s3
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: "${S3_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${S3_SECRET_KEY}"
      MINIO_DEFAULT_BUCKETS: "${S3_DEFAULT_BUCKET_NAME}:public"
    volumes:
      - s3-data:/data
    ports:
      - "${S3_PORT}:${S3_PORT}"
      - "9001:9001"
    networks:
      - main_network
    healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:${S3_PORT}/minio/health/live"]
     interval: 30s
     timeout: 20s
     retries: 3

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - '80:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - master-backend-api
    networks:
      - main_network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - main_network


  grafana:
    # default login -> admin, password -> admin
    #https://chatgpt.com/share/67c420f0-cc84-8004-84b2-03b78e2d6e50
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - main_network
    depends_on:
      - prometheus
      - loki

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    networks:
      - main_network
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log  # Логи системи
    networks:
      - main_network
    command: -config.file=/etc/promtail/config.yml

volumes:
  postgres-data:
    external: false
  pgadmin-data:
  redis-data:
  redis-insight:
  rabbitmq-data:
  s3-data:

networks:
  main_network:
    driver: bridge
  postgres_network:
  redis_network:
  rabbitmq_network:
